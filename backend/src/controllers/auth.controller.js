import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import User from "../models/user.js";

/**
 * üîë ƒêƒÉng nh·∫≠p b·∫±ng email ho·∫∑c username
 */
export const login = async (req, res) => {
  try {
    const { identifier, password } = req.body;

    if (!identifier || !password) {
      return res
        .status(400)
        .json({ message: "Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u." });
    }

    // ‚úÖ T√¨m user theo email ho·∫∑c username
    const user = await User.findOne(
      identifier.includes("@")
        ? { email: identifier }
        : { username: identifier }
    );
    if (!user)
      return res.status(404).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i." });

    // ‚úÖ Ki·ªÉm tra m·∫≠t kh·∫©u
    const ok = await bcrypt.compare(password, user.password);
    if (!ok)
      return res.status(400).json({ message: "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c." });

    // ‚úÖ Ki·ªÉm tra tr·∫°ng th√°i
    if (user.status && user.status !== "ACTIVE") {
      return res.status(403).json({ message: "T√†i kho·∫£n ƒëang b·ªã kh√≥a." });
    }

    // ‚úÖ T·∫°o JWT
    const token = jwt.sign(
      { userId: user._id, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: "1d" }
    );

    return res.json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      token,
      user: {
        id: user._id,
        name: user.name,
        email: user.email,
        username: user.username,
        birthday: user.birthday,
        role: user.role,
        status: user.status,
        createdAt: user.createdAt,
        updatedAt: user.updatedAt,
      },
    });
  } catch (err) {
    console.error("‚ùå L·ªói trong login:", err);
    return res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};

/**
 * üë§ L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i t·ª´ JWT
 */
export const getMe = async (req, res) => {
  try {
    if (!req.user || !req.user.userId) {
      return res
        .status(401)
        .json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p." });
    }

    const user = await User.findById(req.user.userId).select("-password");
    if (!user)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });

    return res.json({
      id: user._id,
      name: user.name,
      email: user.email,
      username: user.username,
      birthday: user.birthday,
      role: user.role,
      status: user.status,
      createdAt: user.createdAt,
      updatedAt: user.updatedAt,
    });
  } catch (err) {
    console.error("‚ùå L·ªói trong getMe:", err);
    return res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};

/**
 * ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
 */
export const updateProfile = async (req, res) => {
  try {
    if (!req.user || !req.user.userId) {
      return res
        .status(401)
        .json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ƒëƒÉng nh·∫≠p." });
    }

    const { name, username, birthday, email } = req.body;
    if (!name || !username || !birthday || !email) {
      return res
        .status(400)
        .json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin." });
    }

    // ‚úÖ Ki·ªÉm tra tr√πng email / username
    const emailExists = await User.findOne({
      email,
      _id: { $ne: req.user.userId },
    });
    if (emailExists) {
      return res.status(400).json({ message: "Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng." });
    }

    const usernameExists = await User.findOne({
      username,
      _id: { $ne: req.user.userId },
    });
    if (usernameExists) {
      return res
        .status(400)
        .json({ message: "T√™n ƒëƒÉng nh·∫≠p n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng." });
    }

    // ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin
    const updatedUser = await User.findByIdAndUpdate(
      req.user.userId,
      { name, username, birthday, email },
      { new: true, runValidators: true }
    ).select("-password");

    if (!updatedUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });
    }

    return res.json({
      message: "C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng.",
      user: updatedUser,
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t h·ªì s∆°:", err);
    return res
      .status(500)
      .json({
        message: "L·ªói m√°y ch·ªß khi c·∫≠p nh·∫≠t th√¥ng tin.",
        error: err.message,
      });
  }
};

/**
 * üë• L·∫•y danh s√°ch to√†n b·ªô ng∆∞·ªùi d√πng (ch·ªâ ADMIN)
 */
export const getAllUsers = async (req, res) => {
  try {
    if (req.user.role !== "ADMIN") {
      return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p." });
    }

    const users = await User.find().select("-password");
    return res.json(users);
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng:", err);
    return res.status(500).json({ message: "L·ªói m√°y ch·ªß", error: err.message });
  }
};
